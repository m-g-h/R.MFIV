"2020-02-11",
"2020-02-12")
exp <- lubridate::ymd("2020-01-24", # invalid friday, always NA
"2020-01-17",
"2020-02-21",
"2020-03-20",
"2020-04-17")
res_mn <- numeric()
for (i in 1:length(t)) {
for (j in 1:length(exp)) {
print(c(t[i], exp[j]))
print(CBOE_interpolation_terms(date_t = t[i],
date_exp = exp[j],
method = "monthly"))
res_mn <- c(res_mn,
CBOE_interpolation_terms(date_t = t[i],
date_exp = exp[j],
method = "monthly")
)
}
}
## 2020-17-01 is first, 2020-02-21 is second, 2020-03-20, is third 2020-04-17 is fourth valid friday
t <- lubridate::ymd("2020-01-09", # 17th is near-term, 21st next-term, 20th NA
"2020-01-10", # 17th is NA,        21st near-term, 20th next-term
"2020-01-11",  # 17th is NA,        21st near-term, 20th next-term
"2020-02-11",
"2020-02-12")
exp <- lubridate::ymd("2020-01-24", # invalid friday, always NA
"2020-01-17",
"2020-02-21",
"2020-03-20",
"2020-04-17")
res_mn <- numeric()
for (i in 1:length(t)) {
for (j in 1:length(exp)) {
print(c(t[i], exp[j]))
print(CBOE_interpolation_terms(date_t = t[i],
date_exp = exp[j],
method = "monthly"))
res_mn <- c(res_mn,
CBOE_interpolation_terms(date_t = t[i],
date_exp = exp[j],
method = "monthly")
)
}
}
## 2020-17-01 is first, 2020-02-21 is second, 2020-03-20, is third 2020-04-17 is fourth valid friday
t <- lubridate::ymd("2020-01-09", # 17th is near-term, 21st next-term, 20th NA
"2020-01-10", # 17th is NA,        21st near-term, 20th next-term
"2020-01-11",  # 17th is NA,        21st near-term, 20th next-term
"2020-02-13",
"2020-02-14")
exp <- lubridate::ymd("2020-01-24", # invalid friday, always NA
"2020-01-17",
"2020-02-21",
"2020-03-20",
"2020-04-17")
res_mn <- numeric()
for (i in 1:length(t)) {
for (j in 1:length(exp)) {
print(c(t[i], exp[j]))
print(CBOE_interpolation_terms(date_t = t[i],
date_exp = exp[j],
method = "monthly"))
res_mn <- c(res_mn,
CBOE_interpolation_terms(date_t = t[i],
date_exp = exp[j],
method = "monthly")
)
}
}
res_mn
testthat::expect_equal(res_mn, c(NA, 1, 2, NA, NA,
NA, NA, 1, 2, NA,
NA, NA, 1, 2, NA,
NA, NA, 1, 2, NA,
NA, NA, NA, 1, 2))
## Monthly method
t <- lubridate::ymd("2020-01-02")
exp <- lubridate::ymd("2020-02-21")
CBOE_interpolation_terms(date_t = t, date_exp = exp, method = "monthly")
maturity <- c(0.07, 0.14)
sigma_sq <- c(0.5, 1)
stats::approx(x = maturity,
y = sigma_sq,
xout = 30/365)
stop(crayon::red("the provided arguments "),
crayon::silver("`maturity` "),
crayon::red("and "),
crayon::silver("`sigma_sq` "),
crayon::red("are not of length "),
crayon::silver("2 "),
crayon::red(". See "),
crayon::blue("`help(CBOE_VIX_interpolation)`"))
CBOE_VIX_interpolation <- function(maturity, sigma_sq){
if(length(maturity) != 2
|length(sigma_sq) != 2){
stop(crayon::red("the provided arguments "),
crayon::silver("`maturity` "),
crayon::red("and "),
crayon::silver("`sigma_sq` "),
crayon::red("are not of length "),
crayon::silver("2"),
crayon::red(". See "),
crayon::blue("`help(CBOE_VIX_interpolation)`"))
}
stats::approx(x = maturity,
y = sigma_sq,
xout = 30/365)
}
30/365
27/365
33/365
CBOE_VIX_interpolation(maturity = c(0.074, 0.09),
sigma_sq = c(0.3, 0.5))
30/365
#' @export
#'
#' @examples
#'
#' library(R.MFIV)
#'
#' CBOE_VIX_interpolation(maturity = c(0.074, 0.09),
#'                        sigma_sq = c(0.3, 0.5))
#'
#'
CBOE_VIX_interpolation <- function(maturity, sigma_sq){
if(length(maturity) != 2
|length(sigma_sq) != 2){
stop(crayon::red("the provided arguments "),
crayon::silver("`maturity` "),
crayon::red("and "),
crayon::silver("`sigma_sq` "),
crayon::red("are not of length "),
crayon::silver("2"),
crayon::red(". See "),
crayon::blue("`help(CBOE_VIX_interpolation)`"))
}
## LINEAR INTERPOLATION
sigma_sq_30 <- stats::approx(x = maturity,
y = sigma_sq*maturity,
xout = 30/365)$y
## CALCULATE ANNUALISED STANDARD DEVIATION IN PERCENTAGE POINTS
100 * sqrt(sigma_sq_30 * (365*24*60) / (30*24*60))
}
CBOE_VIX_interpolation(maturity = c(0.074, 0.09),
sigma_sq = c(0.3, 0.5))
CBOE_VIX_interpolation(maturity = c(0.074, 0.09),
sigma_sq = c(0.3, 0.5)
print(CBOE_VIX_interpolation(maturity = c(0.074, 0.09),
sigma_sq = c(0.3, 0.5)), digits = 20
)
library(R.MFIV)
?CBOE_VIX_index
library(R.MFIV)
setwd("C:/Users/User/Projekte/LMU_math4econ")
mhtemplates::use_latex("problems")
data <- R.MFIV::option_dataset
data
data[, R := R.MFIV::interpolate_rfr(date = lubridate::as_date(t),exp = exp,ret_table = F)]
class(data$t[[1]])
data[, t = lubridate::as_datetime(t)]
data[, t := lubridate::as_datetime(t)]
class(data$t[[1]])
data[, R := R.MFIV::interpolate_rfr(date = lubridate::date(t),exp = exp,ret_table = F)]
lubridate::date(data$t[[1]])
cmt <- R.MFIV::cmt_dataset
date <- lubridate::date(data$t)
mean(date %in% cmt$Date
)
## CHECK IF cmt_data COVERS RANGE OF date
if(mean(date %in% cmt$Date) != 1){
stop(crayon::red("\n Dates provided in "),
crayon::silver("`date` "),
crayon::red("are not contained in "),
ifelse(is.null(cmt_data),
paste0(crayon::silver("internal `cmt_data`"),
crayon::red(".\n Use"),
crayon::blue("`R.MFIV::cmt_dataset` "),
crayon::red("to access the internal data. \n")),
paste0(crayon::silver("provided `cmt_data`"),
crayon::red(".\n"))
)
)
}
optdata <- data.table::copy(data)
## MAKE data.table FROM SINGLE VECTORS
data <- data.table::data.table(date, exp)
data
dates <- data
dates <- date
rm(date)
## MAKE data.table FROM SINGLE VECTORS
data <- data.table::data.table(date, exp)
data
## PREPARE CMT DATA FOR THE SPLINE FUNCTION
int_data <- data.table::melt(data = cmt[Date %in% date,],
id.vars = "Date",
measure.vars = patterns("X"),
variable.name = "maturity",
value.name = "rate"
)[, maturity := data.table::fcase(grepl("1.mo", maturity), 1/12,
grepl("2.mo", maturity), 2/12,
grepl("3.mo", maturity), 3/12,
grepl("6.mo", maturity), 6/12,
grepl("1.yr", maturity), 1,
grepl("2.yr", maturity), 2,
grepl("3.yr", maturity), 3,
grepl("5.yr", maturity), 5,
grepl("7.yr", maturity), 7,
grepl("10.yr", maturity), 10,
grepl("20.yr", maturity), 20,
grepl("30.yr", maturity), 30
)]
date <- lubridate::date(R.MFIV::option_dataset$t)
exp <- R.MFIV::option_dataset$exp
cmt_data = NULL
ret_table = F
## USE PPACKAGE DATA IF NONE IS PROVIDED
if(is.null(cmt_data)){
cmt <- R.MFIV::cmt_dataset
} else {
cmt <- cmt_data
}
## CHECK IF cmt_data COVERS RANGE OF date
if(mean(date %in% cmt$Date) != 1){
stop(crayon::red("\n Dates provided in "),
crayon::silver("`date` "),
crayon::red("are not contained in "),
ifelse(is.null(cmt_data),
paste0(crayon::silver("internal `cmt_data`"),
crayon::red(".\n Use"),
crayon::blue("`R.MFIV::cmt_dataset` "),
crayon::red("to access the internal data. \n")),
paste0(crayon::silver("provided `cmt_data`"),
crayon::red(".\n"))
)
)
}
## MAKE data.table FROM SINGLE VECTORS
data <- data.table::data.table(date, exp)
data
## PREPARE CMT DATA FOR THE SPLINE FUNCTION
int_data <- data.table::melt(data = cmt[Date %in% date,],
id.vars = "Date",
measure.vars = patterns("X"),
variable.name = "maturity",
value.name = "rate"
)[, maturity := data.table::fcase(grepl("1.mo", maturity), 1/12,
grepl("2.mo", maturity), 2/12,
grepl("3.mo", maturity), 3/12,
grepl("6.mo", maturity), 6/12,
grepl("1.yr", maturity), 1,
grepl("2.yr", maturity), 2,
grepl("3.yr", maturity), 3,
grepl("5.yr", maturity), 5,
grepl("7.yr", maturity), 7,
grepl("10.yr", maturity), 10,
grepl("20.yr", maturity), 20,
grepl("30.yr", maturity), 30
)]
int_data
int_data[]
## DERIVE RISK-FREE-RATE VIA CUBIC SPLINE
intfun <- function(int_data, date, maturity){
stats::spline(x = int_data[Date == date]$maturity,
y = int_data[Date == date]$rate,
xout = maturity)$y
}
ret <- data[, R := intfun(int_data, unique(date), lubridate::time_length(exp-date, "years")),
by = .(date)]
exp-date
exp[1]
exp[1] - date[1]
class(exp)
## code to prepare `option_dataset` dataset goes here
price_data <- data.table::fread("data-raw/example_pricedata.csv")
option_dataset <- price_data[, .(option_quotes = list(.SD)),
by = .(ticker, t, exp, price=Price)]
option_dataset[, `:=`(t = lubridate::as_datetime(t),
exp = lubridate::as_date(exp))]
usethis::use_data(option_dataset, overwrite = TRUE)
date <- lubridate::date(R.MFIV::option_dataset$t)
exp <- R.MFIV::option_dataset$exp
class(exp)
optdata y- R.MFIV::option_dataset
optdata <- R.MFIV::option_dataset
optdata[, R := R.MFIV::interpolate_rfr(date = lubridate::as_date(t),exp = exp,ret_table = F)]
optdata
optiondata <- data(option_data)
optiondata <- data(option_dataset)
optiondata <- data(option_dataset)
library(R.MFIV)
data(option_dataset)
option_dataset
library(lubridate)
option_dataset[, R := interpolate_rfr(date = as_date(t),
exp = exp,
ret_table = F)]
## Set expiration time to 4 PM
option_dataset[, exp := exp + hours(16)]
option_dataset
## Calculate maturity in years
option_dataset[, maturity := time_length(exp-t,unit = "years")]
option_dataset
## Calculate ATM Forward
option_dataset[, F_0 := CBOE_F_0(option_quotes = option_quotes,
R = T,
maturity = maturity),
by = .(ticker, t, exp)]
option_dataset
?CBOE_F_0
option_dataset$option_quotes[[1]]
option_dataset
## Calculate ATM Forward
option_dataset[, F_0 := CBOE_F_0(option_quotes = option_quotes,
R = R,
maturity = maturity),
by = .(ticker, t, exp)]
## Calculate ATM Forward
option_dataset[, F_0 := CBOE_F_0(option_quotes = option_quotes[[1]],
R = R,
maturity = maturity),
by = .(ticker, t, exp)]
option_dataset
View(option_dataset)
option_dataset[, F_0= := NULL]
option_dataset[, F_0 := NULL]
View(option_dataset)
option_dataset <- option_dataset[1:10,]
option_dataset
library(R.MFIV)
data(option_dataset)
library(R.MFIV)
data(option_dataset)
option_dataset <- option_dataset[1:10,]
library(R.MFIV)
data(option_dataset)
option_dataset <- option_dataset[1:10,]#
option_dataset
library(lubridate)
option_dataset[, R := interpolate_rfr(date = as_date(t),
exp = exp,
ret_table = F)]
## Set expiration time to 4 PM
option_dataset[, exp := exp + hours(16)]
## Calculate maturity in years
option_dataset[, maturity := time_length(exp-t,unit = "years")]
## Calculate ATM Forward
option_dataset[, F_0 := CBOE_F_0(option_quotes = option_quotes[[1]],
R = R,
maturity = maturity),
by = .(ticker, t, exp)]
option_dataset
option_dataset[, K_0 := CBOE_K_0(option_quotes = option_quotes[[1]],
F_0 = F_0),
by = .(ticker, t, exp)]
option_dataset[, option_quotes := CBOE_option_selection(option_quotes = option_quotes[[1]],
K_0 = K_0),
by = .(ticker, t, exp)]
option_dataset[, option_quotes := list(CBOE_option_selection(option_quotes = option_quotes[[1]],
K_0 = K_0)),
by = .(ticker, t, exp)]
option_dataset[, option_quotes := list(list(CBOE_option_selection(option_quotes = option_quotes[[1]],
K_0 = K_0))),
by = .(ticker, t, exp)]
option_dataset
View(option_dataset)
View(option_dataset[[5]][[1]])
option_dataset[, sigma_sq := CBOE_sigma_sq(sel_option_quotes = option_quotes[[1]],
K_0 = K_0,
F_0 = F_0,
maturity = maturity,
R = R),
by = .(ticker, t, exp)]
option_dataset
option_dataset[, term_wk := CBOE_interpolation_terms(maturity = maturity,
method = "weekly")]
option_dataset[, term_wk := CBOE_interpolation_terms(maturity = maturity,
method = "weekly"),
by = .(ticker, t, exp)]
option_dataset
option_dataset[!is.na(term_wk)]
option_dataset[!is.na(term_wk)
][, .(VIX = CBOE_VIX_index(maturity = maturity,
sigma_sq = sigma_sq)),
by = .(ticker, t, exp)]
option_dataset[!is.na(term_wk)
]
option_dataset[!is.na(term_wk)
][, .(VIX = CBOE_VIX_index(maturity = maturity,
sigma_sq = sigma_sq)),
by = .(ticker, t)]
library(R.MFIV)
data(option_dataset)
option_dataset <- option_dataset
option_dataset
date <- option_dataset$t[1]
exp <- option_dataset$exp[1]
option_quotes <- option_dataset$option_quotes[1]
option_quotes <- option_dataset$option_quotes[[1]]
option_quotes
date <- option_dataset$t[1]
exp <- option_dataset$exp[1]
option_quotes <- option_dataset$option_quotes[[1]]
option_quotes                                     ret_table = F)]
date <- option_dataset$t[1]
exp <- option_dataset$exp[1]
option_quotes <- option_dataset$option_quotes[[1]]
option_quotes
library(lubridate)
R <- interpolate_rfr(date = as_date(t),
exp = exp,
ret_table = F)]
library(lubridate)
R <- interpolate_rfr(date = as_date(t),
exp = exp,
ret_table = F)
t <- option_dataset$t[1]
exp <- option_dataset$exp[1]
option_quotes <- option_dataset$option_quotes[[1]]
option_quotes
library(lubridate)
R <- interpolate_rfr(date = as_date(t),
exp = exp,
ret_table = F)
R
## Set expiration time to 4 PM
exp <- exp + hours(16)
## Calculate maturity in years
maturity <- time_length(exp-t,unit = "years")
## Calculate ATM Forward
F_0 <- CBOE_F_0(option_quotes = option_quotes,
R = R,
maturity = maturity)
## Set expiration time to 4 PM
exp <- exp + hours(16)
## Calculate maturity in years
maturity <- time_length(exp-t,unit = "years")
## Calculate ATM Forward
F_0 <- CBOE_F_0(option_quotes = option_quotes,
R = R,
maturity = maturity)
F_0
K_0 <- CBOE_K_0(option_quotes = option_quotes,
F_0 = F_0)
K_0
option_quotes <- CBOE_option_selection(option_quotes = option_quotes,
K_0 = K_0)))
option_quotes <- CBOE_option_selection(option_quotes = option_quotes,
K_0 = K_0)
option_quotes
sigma_sq CBOE_sigma_sq(sel_option_quotes = option_quotes,
sigma_sq <- CBOE_sigma_sq(sel_option_quotes = option_quotes,
K_0 = K_0,
F_0 = F_0,
maturity = maturity,
R = R)
sigma_sq <- CBOE_sigma_sq(sel_option_quotes = option_quotes,
K_0 = K_0,
F_0 = F_0,
maturity = maturity,
R = R)
sigma_sq
library(R.MFIV)
data(option_dataset)
option_dataset <- option_dataset
option_dataset
option_dataset[1:10,][, term_wk := CBOE_interpolation_terms(maturity = maturity,
method = "weekly"),
by = .(ticker, t, exp)]
option_dataset
option_dataset[1:10,][, term_wk := CBOE_interpolation_terms(maturity = maturity,
method = "weekly"),
by = .(ticker, t, exp)]
option_dataset
option_dataset[1:10,][, term_wk := CBOE_interpolation_terms(maturity = maturity,
method = "weekly"),
by = .(ticker, t, exp)][]
option_dataset[1:10,][, term_wk := CBOE_interpolation_terms(maturity = time_length((exp+hours(16)) - t,unit = "years"),
method = "weekly"),
by = .(ticker, t, exp)][]
t <- option_dataset$t[4]
exp <- option_dataset$exp[4]
option_quotes <- option_dataset$option_quotes[[4]]
option_quotes
library(lubridate)
R <- interpolate_rfr(date = as_date(t),
exp = exp,
ret_table = F)
R
## Set expiration time to 4 PM
exp <- exp + hours(16)
## Calculate maturity in years
maturity <- time_length(exp-t,unit = "years")
## Calculate ATM Forward
F_0 <- CBOE_F_0(option_quotes = option_quotes,
R = R,
maturity = maturity)
F_0
K_0 <- CBOE_K_0(option_quotes = option_quotes,
F_0 = F_0)
K_0
option_quotes <- CBOE_option_selection(option_quotes = option_quotes,
K_0 = K_0)
option_quotes
sigma_sq <- CBOE_sigma_sq(sel_option_quotes = option_quotes,
K_0 = K_0,
F_0 = F_0,
maturity = maturity,
R = R)
sigma_sq
