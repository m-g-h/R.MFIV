K_N <- exp(SD * sqrt(maturity) * 15) * F_0
## CALCULATE LEFT SLOPE
left_slope <- (center[1, y] - center[2, y]) / inc
## EXTRAPOLATE LEFT TAIL
left_tail <- data.table::data.table(x = seq(from = K_2 - inc,
to = K_1,
by = -inc))[,
y := center[1, y] + (K_2 - x)*left_slope
]
## CALCULATE RIGHT SLOPE
right_slope <- (center[.N, y] - center[.N-1, y]) / inc
## EXTRAPOLATE RIGHT TAIL
right_tail <- data.table::data.table(x = seq(from = K_N1 + inc,
to = K_N,
by = inc))[,
y := center[.N, y] + (x - K_N1)*right_slope
]
left_tail
right_tail[]
## BIND CENTRAL PART AND TAILS
IV_EX_set <- rbind(left_tail, center, right_tail)
data.table::setkey(IV_EX_set, x)
data.table::setnames(IV_EX_set, c("K", "IV"))
IV_EX_set
data.table::setkey(IV_EX_set, x)
data.table::setnames(IV_EX_set, c("K", "IV"))
## FUNCTION FOR INSIDE THE MAPPLY CALL
pricefun <- function(TypeFlag, price, K, maturity, R, IV, b){
fOptions::GBSOption(TypeFlag = TypeFlag,
S = price,
X = K,
Time = maturity,
r =  R/maturity,
sigma = IV,
b = b)@price
}
## CALCULATE OPTION PRICES USING B&S AND INTERPOLATED IV
IV_EX_set[, TypeFlag := ifelse(K <= K_0,
"p",
"c")
][, Q := mapply(pricefun,
TypeFlag, price, K, maturity, R, IV,
MoreArgs = list(b = 0))
]
## RETURN INTERPOLATED OPTION_QUOTES
IV_EX_set[,-c(2:3)]
library(R.MFIV)
library(R.MFIV)
## LOAD EXAMPLE OPTION_QUOTES
nest <- option_dataset$option_quotes[[1]]
## EXTRAPOLATE DATA
extra_data <- JandT_2007_smoothing_method(option_quotes = nest,
maturity = 0.008953152,
K_0 = 147,
price = 147.39,
R = 0.008325593,
F_0 = 147.405)
extra_data
## LOAD RESULTS
cor_extra_data <- readRDS("cor_extra_data")
testthat::expect_equal(extra_data,
cor_extra_data)
saveRDS(extra_data, "tests/testthat/cor_extra_data")
library(R.MFIV)
nest <- CBOE_option_selection(option_dataset$option_quotes[[1]],
147)
CBOE_sigma_sq(sel_option_quotes = nest,
K_0 = 147,
F_0 = 147.5,
maturity = 0.07,
R = 0.005)
## LOAD EXAMPLE OPTION_QUOTES
nest <- option_dataset$option_quotes[[1]]
## EXTRAPOLATE DATA
JandT_2007_smoothing_method(option_quotes = nest,
maturity = 0.008953152,
K_0 = 147,
price = 147.39,
R = 0.008325593,
F_0 = 147.405)
## EXTRAPOLATE DATA
smooth_option_quotes <- JandT_2007_smoothing_method(option_quotes = nest,
maturity = 0.008953152,
K_0 = 147,
price = 147.39,
R = 0.008325593,
F_0 = 147.405)
smooth_option_quotes$K - shift(smooth_option_quotes$K)
library(data.table)
unique(smooth_option_quotes$K - shift(smooth_option_quotes$K))
unique(smooth_option_quotes$K - shift(smooth_option_quotes$K),incomparables = F)
unique(smooth_option_quotes$K - shift(smooth_option_quotes$K),incomparables = T)
smooth_option_quotes$K - shift(smooth_option_quotes$K)
(smooth_option_quotes$K - shift(smooth_option_quotes$K))[-1]
unique((smooth_option_quotes$K - shift(smooth_option_quotes$K))[-1])
K_0 = 147
smooth_option_quotes[K <= K_0,]
smooth_option_quotes[K <= K_0, .(res = Q/K^2)]
smooth_option_quotes[K <= K_0, .(K = K,
res = Q/K^2)
][, ]
smooth_option_quotes[K <= K_0, .(K = K,
res = Q/K^2)
][, res2 := shift(res)]
smooth_option_quotes[K <= K_0, .(K = K,
res = Q/K^2)
][, res2 := shift(res)][]
smooth_option_quotes[K <= K_0, .(K = K,
res = Q/K^2)
][, res2 := shift(res)
][, res3 := res + res2][]
smooth_option_quotes[K <= K_0, .(K = K,
res = Q/K^2)
][, res2 := shift(res)
][, res3 := res + res2
][, sum := res + shift(res)]
smooth_option_quotes[K <= K_0, .(K = K,
res = Q/K^2)
][, res2 := shift(res)
][, res3 := res + res2
][, sum := res + shift(res)][]
smooth_option_quotes[K <= K_0, .(K = K,
sum = Q/K^2)
][, sum := sum + shift(sum)][]
smooth_option_quotes[K <= K_0, .(K = K,
sum = Q/K^2)
][, .(sum(sum + shift(sum))][]
}
smooth_option_quotes[K <= K_0, .(K = K,
sum = Q/K^2)
][, .(sum = sum(sum + shift(sum))][]
}
smooth_option_quotes[K <= K_0, .(K = K,
sum = Q/K^2)
][, .(sum = sum(sum + shift(sum)))][]
smooth_option_quotes[K <= K_0, .(K = K,
sum = Q/K^2)
][, .(sum = sum(sum + shift(sum),na.rm = T))][]
smooth_option_quotes[K <= K_0, .(K = K,
sum = Q/K^2)
][, .(sum = sum(sum + shift(sum),na.rm = T))]
smooth_option_quotes[K <= K_0, .(K = K,
sum = Q/K^2)
][, sum(sum + shift(sum),na.rm = T)]
smooth_option_quotes[K > K_0, .(K = K,
sum = Q/K^2)
]
## UPPER HALF OF TRAPEZOIDAL INTEGRATION
upper <- smooth_option_quotes[K > K_0, .(K = K,
sum = Q/K^2)
][, sum(sum + shift(sum, type = "lead"),na.rm = T)]
## UPPER HALF OF TRAPEZOIDAL INTEGRATION
upper <- smooth_option_quotes[K > K_0, .(K = K,
sum = Q/K^2)
][, sum(sum + shift(sum, type = "lead"),na.rm = T)][]
## UPPER HALF OF TRAPEZOIDAL INTEGRATION
upper <- smooth_option_quotes[K > K_0, .(K = K,
sum = Q/K^2)
][, shift(sum, type = "lead")][]
smooth_option_quotes[K > K_0, .(K = K,
sum = Q/K^2)
][, shift(sum, type = "lead")][]
smooth_option_quotes[K > K_0, .(K = K,
sum = Q/K^2)
][, a := shift(sum, type = "lead")][]
smooth_option_quotes[K > K_0, .(K = K,
sum = Q/K^2)
][, sum(sum + shift(sum, type = "lead"),na.rm = T)][]
## RETURN FULL MFIV
(2 / maturity) * exp(R * maturity)
maturity = 0.008953152
K_0 = 147
price = 147.39
R = 0.008325593
F_0 = 147.405
## RETURN FULL MFIV
(2 / maturity) * exp(R * maturity)
(2 / maturity)
## RETURN FULL MFIV
(2 / maturity) * exp(R * maturity)
exp(R * maturity)
## DETERMINE STRIKE SPACING (delta_K / 2)
delta_K <- unique((smooth_option_quotes$K - shift(smooth_option_quotes$K))[-1]) / 2
## RETURN FULL MFIV
(2 / maturity) * exp(R * maturity) * delta_K * (lower + upper)
## LOWER HALF OF TRAPEZOIDAL INTEGRATION
lower <- smooth_option_quotes[K <= K_0, .(K = K,
sum = Q/K^2)
][, sum(sum + shift(sum),na.rm = T)]
## UPPER HALF OF TRAPEZOIDAL INTEGRATION
upper <- smooth_option_quotes[K > K_0, .(K = K,
sum = Q/K^2)
][, sum(sum + shift(sum, type = "lead"),na.rm = T)]
## RETURN FULL MFIV
(2 / maturity) * exp(R * maturity) * delta_K * (lower + upper)
(2 / maturity) * exp(R * maturity) * delta_K
(2 / maturity) * exp(R * maturity) * delta_K * (lower + upper)
(lower + upper)
## RETURN FULL MFIV
(2 / maturity) * exp(R * maturity) * delta_K * (lower + upper)
nest <- CBOE_option_selection(option_dataset$option_quotes[[1]],
147)
CBOE_sigma_sq(sel_option_quotes = nest,
K_0 = 147,
F_0 = 147.5,
maturity = 0.07,
R = 0.005)
K_0 = 147
F_0 = 147.5
maturity = 0.07
R = 0.005
## DETERMINE STRIKE SPACING (delta_K / 2)
delta_K <- unique((smooth_option_quotes$K - shift(smooth_option_quotes$K))[-1]) / 2
## LOWER HALF OF TRAPEZOIDAL INTEGRATION
lower <- smooth_option_quotes[K <= K_0, .(K = K,
sum = Q/K^2)
][, sum(sum + shift(sum),na.rm = T)]
## UPPER HALF OF TRAPEZOIDAL INTEGRATION
upper <- smooth_option_quotes[K > K_0, .(K = K,
sum = Q/K^2)
][, sum(sum + shift(sum, type = "lead"),na.rm = T)]
## RETURN FULL MFIV
(2 / maturity) * exp(R * maturity) * delta_K * (lower + upper)
CBOE_sigma_sq(sel_option_quotes = nest,
maturity = 0.008953152,
K_0 = 147,
R = 0.008325593,
F_0 = 147.405)
option_dataset$option_quotes[[1]]
option_dataset[1,]
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
fig.path = "man/figures/README-",
out.width = "100%"
)
knitr::include_graphics("man/figures/VIX_formulas.PNG")
library(R.MFIV)
data(option_dataset)
option_dataset
t <- option_dataset$t[4]
exp <- option_dataset$exp[4]
option_quotes <- option_dataset$option_quotes[[4]]
option_quotes
library(lubridate)
R <- interpolate_rfr(date = as_date(t),
exp = exp,
ret_table = F)
R
## Set expiration time to 4 PM
exp <- exp + hours(16)
## Calculate maturity in years
maturity <- time_length(exp-t,
unit = "years")
## Calculate ATM Forward
F_0 <- CBOE_F_0(option_quotes = option_quotes,
R = R,
maturity = maturity)
F_0
K_0 <- CBOE_K_0(option_quotes = option_quotes,
F_0 = F_0)
K_0
option_quotes <- CBOE_option_selection(option_quotes = option_quotes,
K_0 = K_0)
option_quotes
sigma_sq <- CBOE_sigma_sq(sel_option_quotes = option_quotes,
K_0 = K_0,
F_0 = F_0,
maturity = maturity,
R = R)
sigma_sq
## Select observation 5
t2 <- option_dataset$t[5]
exp2 <- option_dataset$exp[5]
option_quotes2 <- option_dataset$option_quotes[[5]]
## Risk free rate
R2 <- interpolate_rfr(date = as_date(t2),
exp = exp2,
ret_table = F)
## Set expiration time to 4 PM
exp2 <- exp2 + hours(16)
## Calculate maturity in years
maturity2 <- time_length(exp2-t2,unit = "years")
## Calculate all VIX vars at once
VIX_vars <- CBOE_VIX_vars(option_quotes = option_quotes2,
R = R2,
maturity = maturity2,
ret_vars = T)
VIX_vars
CBOE_VIX_index(maturity = c(maturity, maturity2),
sigma_sq = c(sigma_sq,VIX_vars$sigma_sq))
price <- option_dataset$price[4]
option_descriptives(option_quotes = option_quotes,
K_0 = K_0,
R = R,
price = price,
maturity = maturity)
library(future.apply)
plan(multisession, workers = 4) ## Parallelize using four cores
## Determine maturity
option_dataset[, maturity := time_length((exp + hours(16) - t),unit = "years")]
## Weekly and monthly expiration terms
option_dataset[, `:=`(term_wk = future_sapply(maturity, CBOE_interpolation_terms,
method = "weekly"),
term_mn = future_mapply(CBOE_interpolation_terms,
maturity, as_date(t), as_date(exp),
MoreArgs = list(method = "monthly"))
)]
## Select only options needed for the weekly and monthly VIX
option_dataset <- option_dataset[!is.na(term_wk)
| !is.na(term_mn)]
option_dataset
option_dataset
## Calculate risk-free-rate and maturity
option_dataset[, `:=`(R = interpolate_rfr(date = as_date(t),
exp = exp))]
## This function converts the mapply results below to a data.table
multicols <- function(matrix){
data.table::as.data.table(t(matrix))[, lapply(.SD, unlist)]
}
## Calculate VIX for the whole dataset, including intermediate variables
option_dataset[, c("F_0", "K_0", "n_put_raw", "n_call_raw", "n_put", "n_call", "sigma_sq") :=
multicols(future_mapply(CBOE_VIX_vars,
option_quotes, R, maturity,
MoreArgs = list(ret_vars = T))
)]
option_dataset
nest <- CBOE_option_selection(option_dataset$option_quotes[[1]],
147)
CBOE_sigma_sq(sel_option_quotes = nest,
maturity = 0.06644802,
K_0 = 147,
R = 0.008769736,
F_0 = 147.5697)
JandT_2007_smoothing_method(option_quotes = nest,
maturity = 0.06644802,
K_0 = 147,
R = 0.008769736,
F_0 = 147.5697,
price = 147.39)
## LOAD EXAMPLE OPTION_QUOTES
nest <- option_dataset$option_quotes[[1]]
JandT_2007_smoothing_method(option_quotes = nest,
maturity = 0.06644802,
K_0 = 147,
R = 0.008769736,
F_0 = 147.5697,
price = 147.39)
smooth_option_quotes <- JandT_2007_smoothing_method(option_quotes = nest,
maturity = 0.06644802,
K_0 = 147,
R = 0.008769736,
F_0 = 147.5697,
price = 147.39)
maturity = 0.06644802
K_0 = 147
R = 0.008769736
F_0 = 147.5697
price = 147.39
## DETERMINE STRIKE SPACING (delta_K / 2)
delta_K <- unique((smooth_option_quotes$K - shift(smooth_option_quotes$K))[-1]) / 2
## LOWER HALF OF TRAPEZOIDAL INTEGRATION
lower <- smooth_option_quotes[K <= K_0, .(K = K,
sum = Q/K^2)
][, sum(sum + shift(sum),na.rm = T)]
## UPPER HALF OF TRAPEZOIDAL INTEGRATION
upper <- smooth_option_quotes[K > K_0, .(K = K,
sum = Q/K^2)
][, sum(sum + shift(sum, type = "lead"),na.rm = T)]
## RETURN FULL MFIV
(2 / maturity) * exp(R * maturity) * delta_K * (lower + upper)
CBOE_sigma_sq(sel_option_quotes = nest,
maturity = 0.06644802,
K_0 = 147,
R = 0.008769736,
F_0 = 147.5697)
library(R.MFIV)
nest <- CBOE_option_selection(option_dataset$option_quotes[[1]],
147)
CBOE_sigma_sq(sel_option_quotes = nest,
maturity = 0.06644802,
K_0 = 147,
R = 0.008769736,
F_0 = 147.5697)
nest
a <- copy(nest)
## LOAD EXAMPLE OPTION_QUOTES
nest <- option_dataset$option_quotes[[1]]
## EXTRAPOLATE DATA
JandT_2007_smoothing_method(option_quotes = nest,
maturity = 0.06644802,
K_0 = 147,
R = 0.008769736,
F_0 = 147.5697,
price = 147.39)
## LOAD EXAMPLE OPTION_QUOTES
b <- JandT_2007_smoothing_method(option_quotes = nest,
maturity = 0.06644802,
K_0 = 147,
R = 0.008769736,
F_0 = 147.5697,
price = 147.39)
a
b
b[a, on=.(K)]
a[b, on=.(K)]
JandT_2007_sigma_sq(smooth_option_quotes = smooth_nest,
maturity = 0.06644802,
R = 0.008769736)
library(R.MFIV)
## LOAD EXAMPLE OPTION_QUOTES
nest <- option_dataset$option_quotes[[1]]
## EXTRAPOLATE DATA
smooth_nest <- JandT_2007_smoothing_method(option_quotes = nest,
maturity = 0.06644802,
K_0 = 147,
R = 0.008769736,
F_0 = 147.5697,
price = 147.39)
## CALCULATE MFIV
JandT_2007_sigma_sq(smooth_option_quotes = smooth_nest,
maturity = 0.06644802,
R = 0.008769736)
JandT_2007_sigma_sq(smooth_option_quotes = smooth_nest,
maturity = 0.06644802,
R = 0.008769736)
library(R.MFIV)
## LOAD EXAMPLE OPTION_QUOTES
nest <- option_dataset$option_quotes[[1]]
## EXTRAPOLATE DATA
smooth_nest <- JandT_2007_smoothing_method(option_quotes = nest,
maturity = 0.06644802,
K_0 = 147,
R = 0.008769736,
F_0 = 147.5697,
price = 147.39)
## CALCULATE MFIV
JandT_2007_sigma_sq(smooth_option_quotes = smooth_nest,
maturity = 0.06644802,
R = 0.008769736)
## RETURN FULL MFIV
(2 / maturity) * exp(R * maturity) * delta_K * (lower + upper)
JandT_2007_sigma_sq <- function(smooth_option_quotes,K_0, maturity, R){
## DETERMINE STRIKE SPACING (delta_K / 2)
delta_K <- unique((smooth_option_quotes$K - shift(smooth_option_quotes$K))[-1]) / 2
## LOWER HALF OF TRAPEZOIDAL INTEGRATION
lower <- smooth_option_quotes[K <= K_0, .(K = K,
sum = Q/K^2)
][, sum(sum + shift(sum),na.rm = T)]
## UPPER HALF OF TRAPEZOIDAL INTEGRATION
upper <- smooth_option_quotes[K > K_0, .(K = K,
sum = Q/K^2)
][, sum(sum + shift(sum, type = "lead"),na.rm = T)]
## RETURN FULL MFIV
(2 / maturity) * exp(R * maturity) * delta_K * (lower + upper)
}
JandT_2007_sigma_sq(smooth_option_quotes = smooth_nest,
maturity = 0.06644802,
R = 0.008769736)
library(R.MFIV)
## LOAD EXAMPLE OPTION_QUOTES
nest <- option_dataset$option_quotes[[1]]
## EXTRAPOLATE DATA
smooth_nest <- JandT_2007_smoothing_method(option_quotes = nest,
maturity = 0.06644802,
K_0 = 147,
R = 0.008769736,
F_0 = 147.5697,
price = 147.39)
## CALCULATE MFIV
JandT_2007_sigma_sq(smooth_option_quotes = smooth_nest,
maturity = 0.06644802,
R = 0.008769736)
JandT_2007_sigma_sq(smooth_option_quotes = smooth_nest,
K_0 = 147,
maturity = 0.06644802,
R = 0.008769736)
library(R.MFIV)
?JandT_2007_sigma_sq
library(R.MFIV)
?JandT_2007_sigma_sq
?CBOE_sigma_sq
devtools::load_all(".")
?JandT_2007_sigma_sq
?JandT_2007_sigma_sq
library(R.MFIV)
?JandT_2007_sigma_sq
library(R.MFIV)
?JandT_2007_sigma_sq
library(R.MFIV)
?JandT_2007_sigma_sq
library(R.MFIV)
?JandT_2007_sigma_sq
library(R.MFIV)
?JandT_2007_sigma_sq
?JandT_2007_sigma_sq
library(R.MFIV)
library(R.MFIV)
?JandT_2007_sigma_sq
library(R.MFIV)
library(R.MFIV)
?JandT_2007_sigma_sq
library(R.MFIV)
?JandT_2007_sigma_sq
library(R.MFIV)
?JandT_2007_sigma_sq
library(R.MFIV)
?JandT_2007_sigma_sq
library(R.MFIV)
?JandT_2007_sigma_sq
library(R.MFIV)
?JandT_2007_sigma_sq
